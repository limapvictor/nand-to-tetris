// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int screenBaseAddress, screenSize;
    static boolean white, black;
    static boolean currentColor;

    /** Initializes the Screen. */
    function void init() {
        let white = false;
        let black = true;
        do Screen.setColor(white);
        let screenBaseAddress = 16384;
        let screenSize = 8192;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        var int screenBlocks;
        var boolean eraseColor;

        let i = 0;
        let screenBlocks = screenSize / 16;
        let eraseColor = currentColor;
        while (i < screenBlocks) {
            do Memory.poke(i * 16, eraseColor);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int currentValue, newValue;
        var int mask;

        let address = (32 * y) + (x / 16) + screenBaseAddress;
        let currentValue = Memory.peek(address);
        
        let mask = Math.powerOfTwo(Math.module(x, 16)); 
        if (currentColor = black) {
            let newValue = currentValue | mask;
        } else {
            let newValue = currentValue & (~ mask);
        }
        do Memory.poke(address, newValue);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int y;
        var boolean toRight;

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        let y = Math.max(y1, y2);
        let toRight = x2 > x1;

        if (dx = 0) { 
            let y1 = Math.min(y1, y2);
            do Screen.drawVerticalLine(x1, y1, dy);
            return;
        }
        if (dy = 0) {
            let x1 = Math.min(x1, x2);
            do Screen.drawHorizontalLine(x1, y1, dx);
            return;
        }
        do Screen.drawDiagonalLine(x1, y, dx, dy, toRight);
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int distance;
        
        if (r > 181) {
            return;
        }
        let dy = -r;
        while (~(dy > r)) {
            let distance = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - distance, y + dy, x + distance, y + dy);
            let dy = dy + 1;
        }
        return;
    }

    function void drawVerticalLine(int x, int y, int dy) {
        var int i;

        let i = 0;
        while (~(i > dy)) {
            do Screen.drawPixel(x, y + i);
            let i = i + 1;
        }
        return;
    }
    
    function void drawHorizontalLine(int x, int y, int dx) {
        var int i;

        let i = 0;
        while (~(i > dx)) {
            do Screen.drawPixel(x + 1, y);
            let i = i + 1;
        }
        return;
    }

    function void drawDiagonalLine(int x1, int y, int dx, int dy, boolean toRight) {
        var int a, b;
        var int diff;

        let a = 0;
        let b = 0;
        let diff = 0;
        while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x1 + a, y + b);
            if (diff < 0) { 
                if (toRight) { 
                    let a = a + 1;
                } else {
                    let a = a - 1;
                }
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }
}
