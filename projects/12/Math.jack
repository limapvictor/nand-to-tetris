// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int currentPower;
        var int i;
        
        let twoToThe = Array.new(16);
        let currentPower = 1;
        let i = 0;
        while (i < 16) { 
            let twoToThe[i] = currentPower;
            let currentPower = currentPower + currentPower;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) { 
            return x;
        }
        return -x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX;
        var int i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < 16) { 
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int quocient, result;
        var int xSign, ySign;

        let xSign = ~(x < 0);
        let ySign = ~(y < 0);
        let x = Math.abs(x); 
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let quocient = Math.divide(x, y + y);
        if ((x - (2 * quocient * y)) < y) {
            let result = quocient + quocient;
        } else {
            let result = quocient + quocient + 1;
        }
        
        if (xSign = ySign) { 
            return result;
        }
        return -result;
    }

    /** Returns the module of division between x and y.*/
    function int module(int x, int y) {
        var int mod;

        let mod = x - (y * (x / y));
        return mod;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int calc;

        let y = 0;
        let j = (16 / 2) - 1;
        while (j > -1) { 
            let calc = (y + twoToThe[j]) * (y + twoToThe[j]);
            if (~(calc > x) & calc > 0) { 
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    function boolean bit(int x, int i) {
        return ~((x & twoToThe[i]) = 0);
    }
}
