// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int currentLen, maxLen;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) { 
            let maxLength = maxLength + 1;
        }
        let str = Array.new(maxLength);
        let maxLen = maxLength;
        let currentLen = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < currentLen) {
            return str[j];
        }
        return null;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < maxLen) {
            let str[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[currentLen] = c;
        let currentLen = currentLen + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (currentLen > 0) {
            let str[currentLen] = null;
            let currentLen = currentLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, digit, sign;
        var int i;

        let value = 0;
        if (str[0] = String.minus()) {
            let sign = -1;
            let i = 1;
        } else {
            let sign = 1;
            let i = 0;
        }
        while (i < currentLen) {
            let digit = String.char2Int(str[i]);
            let value = (value * 10) + digit;
            let i = i + 1;
        }
        return sign * value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var char c;

        let currentLen = 0;
        if (val < 0) {
            do appendChar(String.minus());
        }
        do int2String(Math.abs(val));
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** Return the integer value of a numeric char*/
    function int char2Int(char c) {
        return c - 48;
    }
    
    /** Return the char value of an integer*/
    function char int2Char(int x) {
        return x + 48;
    }

    method void int2String(int val) {
        var int lastDigit, valBy10;
        var int c;

        let valBy10 = val / 10;
        let lastDigit = val - (valBy10 * 10);
        let c = String.int2Char(lastDigit);
        if (valBy10 < 10) {
            do appendChar(c);
            return;
        }
        do int2String(val / 10);
        return;
    }

    /** Return the char value of '-' char */
    function char minus() {
        return 45;
    }
}
